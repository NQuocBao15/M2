----15/03/2023----
Trong Java, Nested class (lớp lồng nhau) là một lớp được khai báo bên trong một lớp khác. Nested class có thể được khai
báo như một thành viên của lớp bao ngoài hoặc bên trong một phương thức của lớp bao ngoài.

Có 4 loại nested class trong Java:

Inner class: là nested class bên trong một lớp khác và có thể truy cập vào các thành viên (fields, methods) của lớp bao ngoài,
 bao gồm cả các thành viên private.

Local class: là nested class được khai báo bên trong một phương thức và
có thể truy cập các biến cục bộ của phương thức đó.

Anonymous class: là một loại lớp không có tên được khai báo và tạo ra một đối tượng ngay tại chỗ.
Anonymous class thường được sử dụng để triển khai các interface hoặc lớp abstract.

Static nested class: là nested class tĩnh và có thể được truy cập bằng cách sử dụng tên của lớp bao ngoài.




- Biến instance
_Biến instance là các biến bên trong một lớp nhưng bên ngoài bất cứ phương thức nào. Những biến này được thuyết minh khi lớp được tải.
+Biến instance được khai báo trong một lớp(class), bên ngoài các phương thức, constructor và các block.
+Biến instance được lưu trong bộ nhớ heap.
+Biến instance được tạo khi một đối tượng được tạo bằng việc sử dụng từ khóa “new” và sẽ bị phá hủy khi đối tượng bị phá hủy.
+Biến instance có thể được sử dụng bởi các phương thức, constructor, block, … Nhưng nó phải được sử dụng thông qua một đối tượng cụ thể.
+Bạn được phép sử dụng “access modifier” khi khai báo biến instance, mặc định là “default”.
+Biến instance có giá trị mặc định phụ thuộc vào kiểu dữ liệu của nó. Ví dụ nếu là kiểu int, short, byte thì giá trị mặc định là 0, kiểu double thì là 0.0d,
… Vì vậy, bạn sẽ không cần khởi tạo giá trị cho biến instance trước khi sử dụng.
+Bên trong class mà bạn khai báo biến instance, bạn có thể gọi nó trực tiếp bằng tên khi sử dụng ở khắp nới bên trong class đó.

VD:
public class Student {
    private String name;
    private int age;

    public Student(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void showStudent() {
        System.out.println("Ten  : " + name);
        System.out.println("Tuoi : " + age);
    }

    public static void main(String args[]) {
        Student student = new Student("Nguyen Van A");
        student.setAge(21);
        student.showStudent();
    }
}


_Biến static
+Được gọi là biến tĩnh
+Được sử dụng để tham chiếu thuộc tính chung của tất cả đối tượng thuộc một lớp(mà không là duy nhất cho mỗi đối tượng)
+Biến static lấy bộ nhớ chỉ một lần trong Class Area tại thời gian tải lớp đó
+Biến static giúp tiết kiệm bộ nhớ

VD:
public class Student {
    private static String name = "Nguyen Van A";

    private static int age = 21;

    public static void main(String args[]) {
        System.out.println("Ten : " + name);

        System.out.println("Tuoi : " + Student.age);
    }
}


- Biến local trong java
+Biến local được khai báo trong các phương thức, hàm contructor hoặc trong các block.
+Biến local được tạo bên trong các phương thức, contructor, block và sẽ bị phá hủy khi kết thúc các phương thức, contructor và block.
+Không được sử dụng "access modifier" khi khai báo biến local.
+Các biến local được lưu trên vùng nhớ stack của bộ nhớ.
+Cần phải khởi tạo giá trị mặc định cho biến local trước khi có thể sử dụng.

VD:
public class Bien {

    public void sayHello() {
        int n = 10;    // Đây là biến local
        System.out.println("Gia tri cua n la: " + n);
    }

    public static void main(String[] args) {
        Bien bienLocal = new Bien();
        bienLocal.sayHello();
    }
}

----16/03/2023----
Tính kế thừa: cho phép một lớp con kế thừa các thuộc tính và phương thức của một lớp cha và mở rộng chúng hoặc ghi đè lên chúng.
VD:
class Employee {
    float salary = 1000;
}
class Programmer extends Employee {
    int bonus = 150;
}
public class Vidu {
    public static void main(String[] args) {
        Programmer p = new Programmer();
        System.out.println("Programmer salary is: " + p.salary);
        System.out.println("Bonus of Programmer is: " + p.bonus);
    }
}

Tính đa hình trong kế thừa: là khả năng của một đối tượng của một lớp kế thừa (subclass) để
thể hiện một cách khác nhau các phương thức được kế thừa từ lớp cha (superclass) của nó.
Nó cho phép một đối tượng của một lớp con có thể được truy cập và sử dụng như một đối tượng
của lớp cha, hoặc như một đối tượng của lớp con của lớp cha đó.

Cách sử dụng:
public class Shape {
    public void draw() {
        System.out.println("Drawing a Shape");
    }
}

public class Circle extends Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}
public class Main {
    public static void main(String[] args) {
        Shape s = new Circle();
        s.draw();
    }
}

Override là 1 tính năng cho phép lớp con ghi đè phương thức của lớp cha.
Nếu 1 phương thức của lớp cha được ghi đè trong lớp con, và khi gọi phương thức đó ở
lớp con thì phương thức ở lớp con sẽ được gọi thay vì pthức của lớp cha.

Overloading (tạm dịch là nạp chồng phương thức) là một tính năng trong Java cho phép
một lớp có thể có nhiều phương thức cùng tên nhưng khác nhau về số lượng và kiểu đối số.
Khi một phương thức được gọi, trình biên dịch sẽ xác định phương thức thích hợp
để gọi dựa trên số lượng và kiểu đối số được cung cấp.

Biến final: bạn không thể thay đổi giá trị của biến final (nó sẽ là hằng số).
Phương thức final: bạn không thể ghi đè phương thức final.
Lớp final: bạn không thể kế thừa lớp final.
Biến static final trống: Một biến final mà khôg được khởi tạo tại thời điểm khai báo được gọi là biến final trống.

----20/3/2023----
_Vì sao trong Java không cho đa kế thừa
không cho phép đa kế thừa bởi vì nó có thể dẫn đến các vấn đề phức tạp về tính đồng nhất
và đa nghĩa trong mã nguồn, và làm cho việc quản lý mã nguồn trở nên khó khăn hơn.

_Lớp abstract là gì, phương thức abstract là gì. Khi nào sử dụng lớp abstract
abstract class là một lớp chứa phương thức trừu tượng, các class khi kế thừa một abstract class sẽ phải
định nghĩa lại các phương thức trừu tượng trong abstract class. và không thể khởi tạo đối tượng trực tiếp

phương thức abstract class là không được phép khai báo nội dung phương thức, chỉ có thể định nghĩa tên và
các tham số đầu vào.

Khi một nhóm đối tượng có cùng bản chất kế thừa từ một class thì sử dụng abstract class

_Các tính chất của lớp abstract
+Có thể chứa các phương thức trừu tượng, các phương thức này chỉ có khai báo mà không có phần thân hàm.
+Các lớp con kế thừa từ lớp abstract phải triển khai các phương thức trừu tượng này.
+Có thể chứa các phương thức thông thường, các phương thức này có thể có phần thân hàm (implementation) như bình thường.
+Có thể chứa các biến và hằng số, có thể được sử dụng trong các phương thức của lớp và các lớp con.
+Các lớp con kế thừa từ lớp abstract phải triển khai tất cả các phương thức trừu tượng: Khi một lớp con kế thừa từ lớp abstract,
nó phải triển khai (implement) tất cả các phương thức trừu tượng được khai báo trong lớp abstract đó.
+Lớp abstract có thể được kế thừa từ lớp khác: Lớp abstract cũng có thể kế thừa từ một lớp khác,
và các lớp con của nó sẽ kế thừa cả lớp abstract và lớp cha của nó.

_Interface là gì
+Interface là một cấu trúc tương tự như lớp, nhưng chỉ chứa các hằng số và abstract method.
+Interface quy định các hành vi chung cho các lớp triển khai nó.

_Các tính chất của Interface
+Định nghĩa một interface tạo ra một kiểu dữ liệu mới.
+Không thể tạo đối tượng của interface.
+Interface không thể triển khai interface thì cần triển khai tất cả các phương thức được khai báo trong interface đó.
+Interface có thể được thiết kế để khai báo các phương thức chung cho các lớp không liên quan với nhau.
+Interface bổ sung cho việc Java không hỗ trợ "đa kế thừa".

_Khi nào dùng abstrac
+Khi cần sử dụng kế thừa.
+Cần cung cấp các phương thức mặc định và các phương thức nhiều lớp dẫn xuất có thể thực thi và ghi đè.
+Cần tạo nhiều phiên bản cho các thành phần

_Khi nào dùng interface
+Khi cần cung cấp các chức năng chung cho các lớp không liên quan.
+Cần nhóm các đối tượng dựa trên các hành vi phổ biến.
+Cần sử dụng đa hình, vì 1 lớp có thể thực hiện nhiều interface.

----21/3/2023----
_Comparable: là một interface được sử dụng để so sánh các đối tượng với chính nó, tức là các đối tượng cùng kiểu được so sánh với nhau.
Interface này chỉ định một phương thức compareTo () để so sánh các đối tượng.

_Comparator: là một interface được sử dụng để so sánh các đối tượng của các lớp khác nhau, tức là các đối tượng không cùng kiểu.
Interface này chỉ định một phương thức compare () để so sánh các đối tượng.

_Lớp Generic
+Một lớp có thể tham chiếu bất kỳ kiểu đối tượng nào được gọi là lớp generic.
+lớp generic cho phép ta tạo ra một lớp, interface hoặc phương thức có thể hoạt động với
nhiều kiểu dữ liệu khác nhau

_equals()
+khi so sánh hai đối tượng với nhau, java gọi phương thức equals() của chúng trả về true nếu 2 đối tượng bằng nhau
hoặc false nếu 2 đối tượng khác nhau
+equals() được thiết kế để so sánh 2 đối tượng về mặt ngữ nghĩa, còn == là tham chiếu địa chỉ bộ nhớ

----23/3/2023----
